📦 files 🏠

💭 define a class that will return the input lines, optionally as numbers;
💭 additionally define a generic type (don't confuse the syntax with a list,
💭 because here we're not using 🍨), which we'll determine when creating an
💭 instance of this class later, since again we don't know if we'll return
💭 strings or numbers for the lines
🐇 📁 🍇
  🖍🆕 filepath 🔡

  💭 define the initializer (i.e. constructor)
  🆕 🍼 filepath 🔡 🍇🍉

  💭 get a list of lines from the input
  ❗️ 📓 ➡️ 🍨🐚🔡🍆 🍇
    💭 load content as binary data
    🍺📇🐇📄 🔤input.txt🔤❗️ ➡️ bin

    💭 convert binary data to UTF-8 string
    🍺🔡bin❗️ ➡️ str

    💭 split string at \n
    🔫str 🔤❌n🔤❗️ ➡️ 🖍🆕lines

    💭 remove the last new line
    🐼lines❗️

    ↩️ lines
  🍉

  💭 return the list with integers, grouped by every encountered new line
  ❗️ 📔 ➡️ 🍨🐚🍨🐚🔢🍆🍆 🍇
    📓 ❗ ➡️ lines

    🖍🆕 groups 🍨🐚🍨🐚🔢🍆🍆
    🖍️🆕 current_group 🍨🐚🔢🍆
    💭 note: the compiler doesn't understand nested lists apparently, so to
    💭 avoid a warning of an "ambiguous type", make this one list initially
    🍿🍆 ➡️ 🖍️ groups
    🍿🍆 ➡️ 🖍️ current_group

    💭 map every line to an integer
    🔂 line lines 🍇
      📐line ❗ ➡️ length
      ↪️ length ▶️ 0 🍇
        🐻current_group 🍺🔢line 10 ❗️ ❗
      🍉
      🙅 🍇
        🐻groups current_group ❗
        🍿🍆 ➡️ 🖍️current_group
      🍉
    🍉

    💭 don't forget to include the last group, which we wouldn't have pushed yet
    💭 since the input textfile doesn't have a new line at the end
    🐻groups current_group ❗
    🍿🍆 ➡️ 🖍️current_group

    ↩️ groups
  🍉
🍉

🏁🍇
  💭 determine the generic type here, with 🐚🔡🍆
  🆕📁 🔤input.txt🔤 ❗ ➡️ box
  📔box ❗ ➡️ list
  🔂 group list 🍇
    😀 🔤 --- NEW GROUP --- 🔤 ❗
    🔂 element group 🍇
      😀 🔤 🧲element🧲 🔤 ❗
    🍉
  🍉
🍉
